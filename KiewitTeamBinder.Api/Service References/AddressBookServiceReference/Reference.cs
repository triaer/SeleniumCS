//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Agoda.Api.AddressBookServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.qa-software.com/", ConfigurationName="AddressBookServiceReference.AddressBookSoap")]
    public interface AddressBookSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListCompanyType(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyType", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListCompanyTypeAsync(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListCompanies(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanies", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListCompaniesAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContacts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListContacts(string sessionKey, string contactFilter, string orderBy, int startRowPosition, int noOfRows, int companyIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContacts", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListContactsAsync(string sessionKey, string contactFilter, string orderBy, int startRowPosition, int noOfRows, int companyIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCompany(string sessionKey, int companyIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyAsync(string sessionKey, int companyIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetContact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetContact(string sessionKey, int contactIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetContact", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetContactAsync(string sessionKey, int contactIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCompanyType(string sessionKey, int companyTypeIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyType", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyTypeAsync(string sessionKey, int companyTypeIntKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveCompany(string sessionKey, string companyDetailsXml, string globalAdrBookAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveCompanyAsync(string sessionKey, string companyDetailsXml, string globalAdrBookAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveContact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveContact(string sessionKey, string contactDetailsXml, int userToBeDuplicated, bool sendWelcomeNotice, string globalAdrBookAction, bool grantDocAccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveContact", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveContactAsync(string sessionKey, string contactDetailsXml, int userToBeDuplicated, bool sendWelcomeNotice, string globalAdrBookAction, bool grantDocAccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveCompanyType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SaveCompanyType(string sessionKey, string companyTypeDetailsXml, string globalAdrBookAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/SaveCompanyType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SaveCompanyTypeAsync(string sessionKey, string companyTypeDetailsXml, string globalAdrBookAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListContactGroups(string sessionKey, string orderBy, int startRowPosition, int noOfRows, bool sendEmptyGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactGroups", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListContactGroupsAsync(string sessionKey, string orderBy, int startRowPosition, int noOfRows, bool sendEmptyGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyTypesForAllProjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListCompanyTypesForAllProjects(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyTypesForAllProjects", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListCompanyTypesForAllProjectsAsync(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompaniesForAllProjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListCompaniesForAllProjects(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompaniesForAllProjects", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListCompaniesForAllProjectsAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactsForAllProjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListContactsForAllProjects(string sessionKey, string contactFilter, string companyID, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactsForAllProjects", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListContactsForAllProjectsAsync(string sessionKey, string contactFilter, string companyID, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyTypesForAllProjectsAsynchronous", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ListCompanyTypesForAllProjectsAsynchronous(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompanyTypesForAllProjectsAsynchronous", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListCompanyTypesForAllProjectsAsynchronousAsync(string sessionKey, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompaniesForAllProjectsAsynchronous", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ListCompaniesForAllProjectsAsynchronous(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListCompaniesForAllProjectsAsynchronous", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListCompaniesForAllProjectsAsynchronousAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactsForAllProjectsAsynchronous", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ListContactsForAllProjectsAsynchronous(string sessionKey, string companyFilter, string companyID, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ListContactsForAllProjectsAsynchronous", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListContactsForAllProjectsAsynchronousAsync(string sessionKey, string companyFilter, string companyID, string orderBy, int startRowPosition, int noOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyFromProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetCompanyFromProject(string sessionKey, int companyIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyFromProject", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyFromProjectAsync(string sessionKey, int companyIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetContactFromProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetContactFromProject(string sessionKey, int contactIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetContactFromProject", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetContactFromProjectAsync(string sessionKey, int contactIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyTypeFromProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCompanyTypeFromProject(string sessionKey, int companyTypeIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/GetCompanyTypeFromProject", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyTypeFromProjectAsync(string sessionKey, int companyTypeIntKey, int masterProjectKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ExportCompaniesFromGAB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ExportCompaniesFromGAB(string sessionKey, string companyIntKeys, string targetProjIntKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ExportCompaniesFromGAB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ExportCompaniesFromGABAsync(string sessionKey, string companyIntKeys, string targetProjIntKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ExportContactsFromGAB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ExportContactsFromGAB(string sessionKey, string contactIntKeys, string targetProjIntKeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.qa-software.com/ExportContactsFromGAB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ExportContactsFromGABAsync(string sessionKey, string contactIntKeys, string targetProjIntKeys);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AddressBookSoapChannel : Agoda.Api.AddressBookServiceReference.AddressBookSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddressBookSoapClient : System.ServiceModel.ClientBase<Agoda.Api.AddressBookServiceReference.AddressBookSoap>, Agoda.Api.AddressBookServiceReference.AddressBookSoap {
        
        public AddressBookSoapClient() {
        }
        
        public AddressBookSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddressBookSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressBookSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressBookSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable ListCompanyType(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyType(sessionKey, orderBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListCompanyTypeAsync(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyTypeAsync(sessionKey, orderBy);
        }
        
        public System.Data.DataTable ListCompanies(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompanies(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListCompaniesAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompaniesAsync(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Data.DataTable ListContacts(string sessionKey, string contactFilter, string orderBy, int startRowPosition, int noOfRows, int companyIntKey) {
            return base.Channel.ListContacts(sessionKey, contactFilter, orderBy, startRowPosition, noOfRows, companyIntKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListContactsAsync(string sessionKey, string contactFilter, string orderBy, int startRowPosition, int noOfRows, int companyIntKey) {
            return base.Channel.ListContactsAsync(sessionKey, contactFilter, orderBy, startRowPosition, noOfRows, companyIntKey);
        }
        
        public System.Data.DataSet GetCompany(string sessionKey, int companyIntKey) {
            return base.Channel.GetCompany(sessionKey, companyIntKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyAsync(string sessionKey, int companyIntKey) {
            return base.Channel.GetCompanyAsync(sessionKey, companyIntKey);
        }
        
        public System.Data.DataSet GetContact(string sessionKey, int contactIntKey) {
            return base.Channel.GetContact(sessionKey, contactIntKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetContactAsync(string sessionKey, int contactIntKey) {
            return base.Channel.GetContactAsync(sessionKey, contactIntKey);
        }
        
        public System.Data.DataTable GetCompanyType(string sessionKey, int companyTypeIntKey) {
            return base.Channel.GetCompanyType(sessionKey, companyTypeIntKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyTypeAsync(string sessionKey, int companyTypeIntKey) {
            return base.Channel.GetCompanyTypeAsync(sessionKey, companyTypeIntKey);
        }
        
        public string SaveCompany(string sessionKey, string companyDetailsXml, string globalAdrBookAction) {
            return base.Channel.SaveCompany(sessionKey, companyDetailsXml, globalAdrBookAction);
        }
        
        public System.Threading.Tasks.Task<string> SaveCompanyAsync(string sessionKey, string companyDetailsXml, string globalAdrBookAction) {
            return base.Channel.SaveCompanyAsync(sessionKey, companyDetailsXml, globalAdrBookAction);
        }
        
        public string SaveContact(string sessionKey, string contactDetailsXml, int userToBeDuplicated, bool sendWelcomeNotice, string globalAdrBookAction, bool grantDocAccess) {
            return base.Channel.SaveContact(sessionKey, contactDetailsXml, userToBeDuplicated, sendWelcomeNotice, globalAdrBookAction, grantDocAccess);
        }
        
        public System.Threading.Tasks.Task<string> SaveContactAsync(string sessionKey, string contactDetailsXml, int userToBeDuplicated, bool sendWelcomeNotice, string globalAdrBookAction, bool grantDocAccess) {
            return base.Channel.SaveContactAsync(sessionKey, contactDetailsXml, userToBeDuplicated, sendWelcomeNotice, globalAdrBookAction, grantDocAccess);
        }
        
        public string SaveCompanyType(string sessionKey, string companyTypeDetailsXml, string globalAdrBookAction) {
            return base.Channel.SaveCompanyType(sessionKey, companyTypeDetailsXml, globalAdrBookAction);
        }
        
        public System.Threading.Tasks.Task<string> SaveCompanyTypeAsync(string sessionKey, string companyTypeDetailsXml, string globalAdrBookAction) {
            return base.Channel.SaveCompanyTypeAsync(sessionKey, companyTypeDetailsXml, globalAdrBookAction);
        }
        
        public System.Data.DataTable ListContactGroups(string sessionKey, string orderBy, int startRowPosition, int noOfRows, bool sendEmptyGroups) {
            return base.Channel.ListContactGroups(sessionKey, orderBy, startRowPosition, noOfRows, sendEmptyGroups);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListContactGroupsAsync(string sessionKey, string orderBy, int startRowPosition, int noOfRows, bool sendEmptyGroups) {
            return base.Channel.ListContactGroupsAsync(sessionKey, orderBy, startRowPosition, noOfRows, sendEmptyGroups);
        }
        
        public System.Data.DataTable ListCompanyTypesForAllProjects(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyTypesForAllProjects(sessionKey, orderBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListCompanyTypesForAllProjectsAsync(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyTypesForAllProjectsAsync(sessionKey, orderBy);
        }
        
        public System.Data.DataTable ListCompaniesForAllProjects(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompaniesForAllProjects(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListCompaniesForAllProjectsAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompaniesForAllProjectsAsync(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Data.DataTable ListContactsForAllProjects(string sessionKey, string contactFilter, string companyID, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListContactsForAllProjects(sessionKey, contactFilter, companyID, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListContactsForAllProjectsAsync(string sessionKey, string contactFilter, string companyID, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListContactsForAllProjectsAsync(sessionKey, contactFilter, companyID, orderBy, startRowPosition, noOfRows);
        }
        
        public string ListCompanyTypesForAllProjectsAsynchronous(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyTypesForAllProjectsAsynchronous(sessionKey, orderBy);
        }
        
        public System.Threading.Tasks.Task<string> ListCompanyTypesForAllProjectsAsynchronousAsync(string sessionKey, string orderBy) {
            return base.Channel.ListCompanyTypesForAllProjectsAsynchronousAsync(sessionKey, orderBy);
        }
        
        public string ListCompaniesForAllProjectsAsynchronous(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompaniesForAllProjectsAsynchronous(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Threading.Tasks.Task<string> ListCompaniesForAllProjectsAsynchronousAsync(string sessionKey, string companyFilter, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListCompaniesForAllProjectsAsynchronousAsync(sessionKey, companyFilter, orderBy, startRowPosition, noOfRows);
        }
        
        public string ListContactsForAllProjectsAsynchronous(string sessionKey, string companyFilter, string companyID, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListContactsForAllProjectsAsynchronous(sessionKey, companyFilter, companyID, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Threading.Tasks.Task<string> ListContactsForAllProjectsAsynchronousAsync(string sessionKey, string companyFilter, string companyID, string orderBy, int startRowPosition, int noOfRows) {
            return base.Channel.ListContactsForAllProjectsAsynchronousAsync(sessionKey, companyFilter, companyID, orderBy, startRowPosition, noOfRows);
        }
        
        public System.Data.DataSet GetCompanyFromProject(string sessionKey, int companyIntKey, int masterProjectKey) {
            return base.Channel.GetCompanyFromProject(sessionKey, companyIntKey, masterProjectKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyFromProjectAsync(string sessionKey, int companyIntKey, int masterProjectKey) {
            return base.Channel.GetCompanyFromProjectAsync(sessionKey, companyIntKey, masterProjectKey);
        }
        
        public System.Data.DataSet GetContactFromProject(string sessionKey, int contactIntKey, int masterProjectKey) {
            return base.Channel.GetContactFromProject(sessionKey, contactIntKey, masterProjectKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetContactFromProjectAsync(string sessionKey, int contactIntKey, int masterProjectKey) {
            return base.Channel.GetContactFromProjectAsync(sessionKey, contactIntKey, masterProjectKey);
        }
        
        public System.Data.DataTable GetCompanyTypeFromProject(string sessionKey, int companyTypeIntKey, int masterProjectKey) {
            return base.Channel.GetCompanyTypeFromProject(sessionKey, companyTypeIntKey, masterProjectKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCompanyTypeFromProjectAsync(string sessionKey, int companyTypeIntKey, int masterProjectKey) {
            return base.Channel.GetCompanyTypeFromProjectAsync(sessionKey, companyTypeIntKey, masterProjectKey);
        }
        
        public System.Data.DataTable ExportCompaniesFromGAB(string sessionKey, string companyIntKeys, string targetProjIntKeys) {
            return base.Channel.ExportCompaniesFromGAB(sessionKey, companyIntKeys, targetProjIntKeys);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ExportCompaniesFromGABAsync(string sessionKey, string companyIntKeys, string targetProjIntKeys) {
            return base.Channel.ExportCompaniesFromGABAsync(sessionKey, companyIntKeys, targetProjIntKeys);
        }
        
        public System.Data.DataTable ExportContactsFromGAB(string sessionKey, string contactIntKeys, string targetProjIntKeys) {
            return base.Channel.ExportContactsFromGAB(sessionKey, contactIntKeys, targetProjIntKeys);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ExportContactsFromGABAsync(string sessionKey, string contactIntKeys, string targetProjIntKeys) {
            return base.Channel.ExportContactsFromGABAsync(sessionKey, contactIntKeys, targetProjIntKeys);
        }
    }
}
